package com.example.final_dapp;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Trade extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610ae0806100326000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630ff4c916146100515780636a0c86db146101c05780637b5a08c5146103955780638da5cb5b146103b2575b600080fd5b61006e6004803603602081101561006757600080fd5b50356103d6565b60405180868152602001806020018581526020018060200180602001848103845288818151815260200191508051906020019080838360005b838110156100bf5781810151838201526020016100a7565b50505050905090810190601f1680156100ec5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b8381101561011f578181015183820152602001610107565b50505050905090810190601f16801561014c5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561017f578181015183820152602001610167565b50505050905090810190601f1680156101ac5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b610383600480360360a08110156101d657600080fd5b813591908101906040810160208201356401000000008111156101f857600080fd5b82018360208201111561020a57600080fd5b8035906020019184600183028401116401000000008311171561022c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595909490935060408101925060200135905064010000000081111561028757600080fd5b82018360208201111561029957600080fd5b803590602001918460018302840111640100000000831117156102bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561030e57600080fd5b82018360208201111561032057600080fd5b8035906020019184600183028401116401000000008311171561034257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610642945050505050565b60408051918252519081900360200190f35b61006e600480360360208110156103ab57600080fd5b5035610749565b6103ba61093a565b604080516001600160a01b039092168252519081900360200190f35b600060606000606080600186815481106103ec57fe5b9060005260206000209060050201600001546001878154811061040b57fe5b90600052602060002090600502016001016001888154811061042957fe5b9060005260206000209060050201600201546001898154811061044857fe5b906000526020600020906005020160030160018a8154811061046657fe5b9060005260206000209060050201600401838054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561050c5780601f106104e15761010080835404028352916020019161050c565b820191906000526020600020905b8154815290600101906020018083116104ef57829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529599508794509250840190508282801561059a5780601f1061056f5761010080835404028352916020019161059a565b820191906000526020600020905b81548152906001019060200180831161057d57829003601f168201915b5050845460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959750869450925084019050828280156106285780601f106105fd57610100808354040283529160200191610628565b820191906000526020600020905b81548152906001019060200180831161060b57829003601f168201915b505050505090509450945094509450945091939590929450565b60018054600091908101906106579082610949565b506001805460001981019188918390811061066e57fe5b906000526020600020906005020160000181905550856001828154811061069157fe5b906000526020600020906005020160010190805190602001906106b592919061097a565b5084600182815481106106c457fe5b90600052602060002090600502016002018190555083600182815481106106e757fe5b9060005260206000209060050201600301908051906020019061070b92919061097a565b50826001828154811061071a57fe5b9060005260206000209060050201600401908051906020019061073e92919061097a565b509695505050505050565b6001818154811061075657fe5b9060005260206000209060050201600091509050806000015490806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108085780601f106107dd57610100808354040283529160200191610808565b820191906000526020600020905b8154815290600101906020018083116107eb57829003601f168201915b505050506002838101546003850180546040805160206001841615610100026000190190931695909504601f8101839004830286018301909152808552959692959294509091908301828280156108a05780601f10610875576101008083540402835291602001916108a0565b820191906000526020600020905b81548152906001019060200180831161088357829003601f168201915b5050505060048301805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529495949350908301828280156109305780601f1061090557610100808354040283529160200191610930565b820191906000526020600020905b81548152906001019060200180831161091357829003601f168201915b5050505050905085565b6000546001600160a01b031681565b8154818355818111156109755760050281600502836000526020600020918201910161097591906109f8565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109bb57805160ff19168380011785556109e8565b828001600101855582156109e8579182015b828111156109e85782518255916020019190600101906109cd565b506109f4929150610a4a565b5090565b610a4791905b808211156109f4576000808255610a186001830182610a64565b6002820160009055600382016000610a309190610a64565b610a3e600483016000610a64565b506005016109fe565b90565b610a4791905b808211156109f45760008155600101610a50565b50805460018160011615610100020316600290046000825580601f10610a8a5750610aa8565b601f016020900490600052602060002090810190610aa89190610a4a565b5056fea265627a7a723158203ab4e130cb24956b2222ecc8c5662f5ee1316d702fec9476cec6b06d149d1c8164736f6c63430005110032";

    protected Trade(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Trade(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> TradeList(BigInteger param0) {
        final Function function = new Function("TradeList", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<String, String, String, String, String>> getValue(BigInteger _Key) {
        final Function function = new Function("getValue", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_Key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<String, String, String, String, String>>(
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setValue(String _Num, String _Date, String _Cost, String _Place, String _Type) {
        final Function function = new Function(
                "setValue", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_Num),
                new org.web3j.abi.datatypes.Utf8String(_Date),
                new org.web3j.abi.datatypes.Utf8String(_Cost),
                new org.web3j.abi.datatypes.Utf8String(_Place),
                new org.web3j.abi.datatypes.Utf8String(_Type)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static Trade load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Trade load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
